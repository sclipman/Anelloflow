#!/opt/homebrew/bin/bash

# ------------------------------------------------------------------------
# parse_anelloflow_output.sh
#
# Description:
#   This script parses the output directories generated by the Anelloflow 
#   pipeline. For each subdirectory containing:
#       1) read_counts_per_ref.txt
#       2) *_anellovirus_filtered_sorted.bam (plus index .bai)
#   it prints a markdown table:
#       - Reference Name
#       - Reference Length
#       - Mapped Reads
#       - Proportion of Reference Covered (%)
#
#   The coverage metric is computed similarly to how tools like Geneious
#   calculate “% reference covered”: i.e., the fraction of reference bases
#   that have > 0 read coverage, multiplied by 100.
#
# Usage:
#   ./parse_anelloflow_output.sh <Anelloflow_directory>
#
# Notes:
#   1. The script depends on having matching reference names in both
#      read_counts_per_ref.txt and the BAM file’s header.
#   2. If your references in the BAM are suffixed or prefixed (like
#      AB008394_ORF1) but read_counts_per_ref.txt only has AB008394,
#      you must reconcile them or the coverage will be zero.
#   3. Large numbers of references may slow the script since it
#      calls samtools depth once per reference.
#
# Author: Your Name
# ------------------------------------------------------------------------

# Abort on error, pipefail for safety
set -euo pipefail

# Check if the user provided the directory as an argument
if [ "$#" -ne 1 ]; then
    echo "Usage: $0 <Anelloflow_directory>"
    exit 1
fi

# Get the input directory
ANELLOFLOW_DIR="$1"

# Check if the directory exists
if [ ! -d "$ANELLOFLOW_DIR" ]; then
    echo "Error: Directory $ANELLOFLOW_DIR does not exist."
    exit 1
fi

# Loop through all subdirectories
for SAMPLE_DIR in "$ANELLOFLOW_DIR"/*/; do
    
    # Trim trailing slash for consistency
    SAMPLE_DIR=${SAMPLE_DIR%/}
    SAMPLE_NAME=$(basename "$SAMPLE_DIR")
    
    # Define the paths to critical Anelloflow outputs
    READ_COUNTS_FILE="$SAMPLE_DIR/read_counts_per_ref.txt"
    FILTERED_BAM_FILE="$SAMPLE_DIR/${SAMPLE_NAME}_anellovirus_filtered_sorted.bam"
    
    # Check if the read_counts file AND the sorted BAM file exist
    if [ -f "$READ_COUNTS_FILE" ] && [ -f "$FILTERED_BAM_FILE" ]; then
        
        # Output sample name with ##
        echo "## $SAMPLE_NAME"
        
        # Print markdown table headers
        echo "| Reference Name | Reference Length | Mapped Reads | Proportion Covered |"
        echo "|----------------|------------------|--------------|--------------------|"
        
        # Skip any lines where the mapped-reads column is 0 or reference name is '*'
        # We'll also remove carriage returns just in case the file has Windows line endings.
        tr -d '\r' < "$READ_COUNTS_FILE" \
        | awk '$1 != "*" && $3 > 0' \
        | while read -r line; do
            
            REF_NAME=$(echo "$line" | awk '{print $1}')
            REF_LENGTH=$(echo "$line" | awk '{print $2}')
            MAPPED_READS=$(echo "$line" | awk '{print $3}')
            
            # Sanity check: ensure REF_LENGTH is numeric
            # If it's not numeric, skip to avoid division errors
            if ! [[ "$REF_LENGTH" =~ ^[0-9]+$ ]]; then
                # If the length is not purely digits, skip
                continue
            fi
            
            # Use samtools depth to count how many reference bases have coverage > 0
            # -a => report all positions in that region (including 0 coverage)
            # -r => region query (REF_NAME)
            # Send any error messages (like "unknown reference") to /dev/null
            COVERED_BASES=$( samtools depth -a -r "$REF_NAME" "$FILTERED_BAM_FILE" 2>/dev/null \
                | awk '$3 > 0 { c++ } END { print c+0 }' )
            
            # If samtools returned an error or no coverage lines at all, COVERED_BASES might be ""
            # We default to 0 in that case:
            if [ -z "$COVERED_BASES" ]; then
                COVERED_BASES=0
            fi
            
            # Compute proportion covered (as a percentage)
            if [ "$REF_LENGTH" -gt 0 ]; then
                # Force numeric evaluation with awk
                PROPORTION_COVERED=$(awk -v cov="$COVERED_BASES" -v rlen="$REF_LENGTH" \
                    'BEGIN {
                        pc = (cov / rlen) * 100
                        printf("%.2f", pc)
                    }')
            else
                PROPORTION_COVERED="0.00"
            fi
            
            # Print the formatted markdown row
            printf "| %s | %d | %d | %s%% |\n" \
                "$REF_NAME" "$REF_LENGTH" "$MAPPED_READS" "$PROPORTION_COVERED"
        done
        
        # Blank line for readability
        echo
        
    else
        # If there's no read_counts_per_ref.txt or the sorted BAM file is missing, warn the user
        if [ ! -f "$READ_COUNTS_FILE" ]; then
            echo "No read_counts_per_ref.txt found in: $SAMPLE_DIR"
        fi
        if [ ! -f "$FILTERED_BAM_FILE" ]; then
            echo "No sorted, filtered BAM file found in: $SAMPLE_DIR"
        fi
    fi
done